.gitconfig: &gitconfig

  variables:
    DOCKER_TLS_CERTDIR: ""
    GIT_STRATEGY: clone
    BASE_BRANCH: master
    TFUPDATE_ARGS: "./"
    PROVIDER_NAME: aws
  before_script:
    - git config --local user.name "$GIT_USER_NAME"
    - git config --local user.email "$GIT_USER_MAIL"
    - git remote set-url origin https://oauth2:$LAB_CORE_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git

check_provider_version:
  <<: *gitconfig
  stage: check_provider_version

  image:
    name: nakmrt/tfupdate:latest
    entrypoint: [""]

  only:
    - master
  script: |
    VERSION=$(tfupdate release latest terraform-providers/terraform-provider-$PROVIDER_NAME)
    echo "# Latest terraform provider version: v${VERSION}"
    UPDATE_MESSAGE="[tfupdate] Update terraform-provider-$PROVIDER_NAME to v${VERSION}"
    if lab mr list -s "opened" | grep -F "${UPDATE_MESSAGE}"; then
      echo "# A pull request already exists"
    elif lab mr list -s "merged" | grep -F "${UPDATE_MESSAGE}"; then
      echo "# A pull request is already merged"
    else
      echo "# Create new branch"
      git checkout -b update-terraform-provider-$PROVIDER_NAME-to-v${VERSION} origin/$BASE_BRANCH
      echo "# Overwrite provider version"
      tfupdate provider $PROVIDER_NAME -v ${VERSION} $TFUPDATE_ARGS
      if git add . && git diff --cached --exit-code --quiet; then
        echo "# No changes"
      else
        echo "# Commit changes"
        lab commit -m "${UPDATE_MESSAGE}"
        PULL_REQUEST_BODY="For details see: https://github.com/terraform-providers/terraform-provider-$PROVIDER_NAME/releases"
        echo "# Push new branch & Create merge request"
        lab push origin HEAD && lab mr create -d -m "${UPDATE_MESSAGE}" -m "${PULL_REQUEST_BODY}"
      fi
    fi

check_terraform_version:
  <<: *gitconfig
  stage: check_terraform_version

  image:
    name: nakmrt/tfupdate:latest
    entrypoint: [""]

  only:
    - master
  script: |
    VERSION=$(tfupdate release latest hashicorp/terraform)
    echo "# Latest terraform version: v${VERSION}"
    UPDATE_MESSAGE="[tfupdate] Update terraform to v${VERSION}"
    if lab mr list -s "opened" | grep -F "${UPDATE_MESSAGE}"; then
      echo "# A pull request already exists"
    elif lab mr list -s "merged" | grep -F "${UPDATE_MESSAGE}"; then
      echo "# A pull request is already merged"
    else
      echo "# Create new branch"
      lab checkout -b update-terraform-to-v${VERSION} origin/$BASE_BRANCH
      echo "# Overwrite terraform version"
      tfupdate terraform -v ${VERSION} $TFUPDATE_ARGS
      if git add . && git diff --cached --exit-code --quiet; then
        echo "# No changes"
      else
        echo "# Commit changes"
        lab commit -m "${UPDATE_MESSAGE}"
        PULL_REQUEST_BODY="For details see: https://github.com/hashicorp/terraform/releases"
        echo "# Push new branch & Create merge request"
        lab push origin HEAD && lab mr create -d -m "${UPDATE_MESSAGE}" -m "${PULL_REQUEST_BODY}"
      fi
    fi
